<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Python笔记 - category - XiaoXi Blog</title>
        <link>/categories/python%E7%AC%94%E8%AE%B0/</link>
        <description>Python笔记 - category - XiaoXi Blog</description>
        <generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="/categories/python%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml" /><item>
    <title>if语句</title>
    <link>/python/if%E8%AF%AD%E5%8F%A5/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/if%E8%AF%AD%E5%8F%A5/</guid>
    <description><![CDATA[if语句可以检查程序的当前状态，本据此采取相应的措施。
if语句的简单示例 a = [&#39;joecy&#39;,&#39;wang&#39;] for i in a: if i == &#39;joecy&#39;: print(i.title()) 输出：
Joecy wang 在这个for循环中，if语句来检测，所遍历的元素是否为joecy，如果是，就对其使用方法title()。
条件测试 每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试（布尔表达式）。例如i = 'joecy'，Python根据条件测试的值为True或False来决定是否执行if语句中的代码：
&gt;&gt;&gt; car = &#39;bwm&#39; #检查是否相等 &gt;&gt;&gt; car == &#39;bwm&#39; True &gt;&gt;&gt; car == &#39;Bwm&#39; False #检查是否不相等 &gt;&gt;&gt; car != &#39;audi&#39; True #比较数字 &gt;&gt;&gt; a = 18 &gt;&gt;&gt; a == 18 True &gt;&gt;&gt; a &gt; 10 True &gt;&gt;&gt; a &lt; 9 False &gt;&gt;&gt; a != 3 True #使用and检查多个条件，条件同时成立为True &gt;&gt;&gt; car == &#39;bwm&#39; and a == 18 True &gt;&gt;&gt; car !]]></description>
</item><item>
    <title>Json模块</title>
    <link>/python/json%E6%A8%A1%E5%9D%97/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/json%E6%A8%A1%E5%9D%97/</guid>
    <description><![CDATA[很多时候，我们需要保存用户提供的信息，一种简单的方式时通过模块json来存储数据。
 JSON格式最初是为了JavaScript开发的，但随后成了一种常见格式，被众多编程语言采用。
 使用json.dump()存储数据 使用json.dump()可以轻松的存储数据，json.dump()接受两个参数：要存储的数据以及可用于存储数据的文件==对象==，很多时候在提供第二个参数时，都会错误的提供了文件名称，而不是文件==对象==，例如：
import json username = &#39;111&#39; with open(&#39;name.json&#39;,&#39;w&#39;) as name_obj: json.dump(username,name.json) 这时，就会报错：
NameError: name &#39;name&#39; is not defined 原因是我们错误向json.dump()传入了参数name.json，这并不是要存储数据的文件==对象==，应该传入参数name_obj。
import json username = &#39;111&#39; with open(&#39;name.json&#39;,&#39;w&#39;) as name_obj: json.dump(username,name_obj) 同时，也要注意在使用json.dump()存储数据时，函数open()需要传递参数'w'，以便获得写入权限。
使用json.load()读取数据 同样的，使用json.load()时，传入的也是文件==对象==：
import json with open(&#39;name.json&#39;) as name_obj: username_tmp = json.load(name_obj) print(username_tmp) 输出：
111 ]]></description>
</item><item>
    <title>requests基本用法</title>
    <link>/python/requests%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/requests%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[基本的GET、POST请求方法
GET请求 HTTP中最常见的请求之一就是GET请求，用requests构建GET请求非常方便。
使用requests.get() import requests r = requests.get(&#39;https://baidu.com/&#39;) print(type(r)) print(type(r.text)) print(r.status_code) print(r.cookies) print(r.text) 输出：
&lt;class &#39;requests.models.Response&#39;&gt; &lt;class &#39;str&#39;&gt; 200 &lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt; # 部分代码 &lt;!DOCTYPE html&gt; &lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; .... &lt;/body&gt; &lt;/html&gt; 使用requests.get()方法，即可以GET方式请求网页。
 status_code属性获取状态码 cookies属性获取cookies text属性获取网页内容 headers属性获取响应头 url属性获取URL history属性获取请求历史 等等&hellip;&hellip;  如果GET请求需要附加额外信息，例如添加两个参数：
r = requests.get('http://httpbin.org/get?name=joecy&amp;age=24')
如果写成这样未免太繁琐，这时可以利用params参数：
import requests data = {&#39;wd&#39;:&#39;我&#39;} r = requests.get(&#39;https://baidu.com/s&#39;,params=data) print(r.status_code) r.encoding = &#39;utf-8&#39; print(r.text)  r.encoding = 'utf-8' 用于修改编码
 输出了百度关于关键词“我”的搜索结果。
抓取网页 抓取知乎发现页面：]]></description>
</item><item>
    <title>requests库</title>
    <link>/python/requests%E5%BA%93/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/requests%E5%BA%93/</guid>
    <description><![CDATA[Requests库是用Python编写的，基于urllib，采用Apache2 Licensed开源协议的HTTP库；
相比urllib库，Requests库更加方便，可以节约我们大量的工作，完全满足HTTP测试需求。]]></description>
</item><item>
    <title>requests高级用法</title>
    <link>/python/requests%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/requests%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[requests的高级用法包括如：文件上传、Cookies设置、代理设置、会话维持、超时设置等。
文件上传 import requests files = {&#39;file&#39;:open(&#39;logo.png&#39;,&#39;rb&#39;)} r = requests.post(&#39;http://httpbin.org/post&#39;,files=files) print(r.text) 首先创建一个表示文件的字典：files，它的键为file，值为使用open()函数'rb'模式打开的待上传文件。之后在post方法中传递参数files,值为files字典。
Cookies ]]></description>
</item><item>
    <title>urllib库的使用</title>
    <link>/python/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[urllib库是Python内置的HTTP请求库，它包含四个模块：
 request：最基本的HTTP请求模块 error：异常处理模块 parse：工具模块 robotparser：识别robots.txt  使用urllib库，我们只需要关心请求的链接和需要传的参数是什么，以及设置请求头。不需要深入到底层去了解它。]]></description>
</item><item>
    <title>while循环</title>
    <link>/python/while%E5%BE%AA%E7%8E%AF/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/while%E5%BE%AA%E7%8E%AF/</guid>
    <description><![CDATA[Python的循环有两种，一种是for...in循环，依次把list或tuple中的每个元素迭代出来，第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。
使用while循环 下面的例子是使用while循环计算100以内奇数和：
a = 0 b = 99 while b &gt; 0: a = a + b b = b -2 print(a) 让用户选择何时退出 message = &#39;&#39; while message != &#39;q&#39;: message = input() if message != &#39;q&#39;: print(message) 上面的示例代码，在用户输入q是退出循环，否则将循环执行打印用户输入的操作。if语句使用户在输入退出指令q时，不至于将'q'打印出来。
使用标志 active = True message = &#39;&#39; while active: message = input() if message == &#39;q&#39;: active = False else: print(message) 我们将条件测试都放在其他地方，while语句就只需要检查一个条件。从而可以使用程序更加的简洁易读。
使用break退出循环 break语句可以提前结束循环，例如上一个例子，可以这样改写：
while True: message = input() if message == &#39;q&#39;: break else: print(message) 使用continue 在循环中可以使用continue语句跳过当次循环，并执行下一次循环。continue语句不会像break语句那样不再执行余下的代码。]]></description>
</item><item>
    <title>函数</title>
    <link>/python/%E5%87%BD%E6%95%B0/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/%E5%87%BD%E6%95%B0/</guid>
    <description><![CDATA[函数是带名字的、可被重复使用的代码块，用来完成单一或是相关联的功能。例如Python内置的print()、len()、range()等就是函数，除此之外我们也可以自定义函数。
定义函数 def hello(): print(&#39;hello&#39;) hello() 输出：
hello 我们使用def关键字来定义函数，具体规则如下：
  函数代码块以 def关键词开头，后接函数名称和圆括号()。     任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。     函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。     函数内容以冒:号起始，并且缩进。     return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。   向函数传递参数 例如我们定义一个计算长方形面积的函数：
def x(a,b): s = a * b return s &gt;&gt;&gt; x(4,5) 20 示例中，函数x可以接受两个参数：形参a和形参b。在调用函数x的时候，我们向其传递了实参4、5，结果显示它成功计算除了面积。
参数传递 函数中可能包含多个形参，因此我们需要传递多个实参，依据不同情况，参数传递的方式很多：位置参数、默认参数、关键字参数、可变参数等。
位置参数 位置参数需要按照正确的顺序传入，按照位置关联依次将实参传递给形参的传递方式叫做位置参数：
如上个例子：
def x(a,b): s = a * b return s &gt;&gt;&gt; x(4,5) 20 值4、5按照顺序赋值给参数a、b。参数a、b都是位置参数。]]></description>
</item><item>
    <title>发送请求</title>
    <link>/python/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</guid>
    <description><![CDATA[使用urllib的request模块，可以方便的实现请求的发送并得到响应。
发送请求 urlopen() 抓取Python官网：
import urllib.request response = urllib.request.urlopen(&#34;https://www.python.org&#34;) print(response.read().decode(&#39;utf-8&#39;)) 部分输出：
# 部分输出 &lt;script src=&#34;//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&#34;&gt;&lt;/script&gt; &lt;script&gt;window.jQuery || document.write(&#39;&lt;script src=&#34;/static/js/libs/jquery-1.8.2.min.js&#34;&gt;&lt;\/script&gt;&#39;)&lt;/script&gt; &lt;script src=&#34;/static/js/libs/masonry.pkgd.min.js&#34;&gt;&lt;/script&gt; &lt;script type=&#34;text/javascript&#34; src=&#34;/static/js/main-min.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;  decode('utf-8')方法将网页以制定编码解析。
 response是一个HTTPResponse类型的对象：
print(type(response)) 输出如下：
&lt;class &#39;http.client.HTTPResponse&#39;&gt; 它包含read()、readinto()、getheader(name)、getheaders()、fileno()等方法，以及msg、version、status、reason、debuglevel、closed等属性。
例子：
import urllib.request response = urllib.request.urlopen(&#34;https://www.baidu.com&#34;) print(response.status) print(&#39;\n&#39;,response.getheaders()) print(&#39;\n&#39;,response.getheader(&#39;Server&#39;)) 输出结果：
200 [(&#39;Accept-Ranges&#39;, &#39;bytes&#39;), (&#39;Cache-Control&#39;, &#39;no-cache&#39;), (&#39;Content-Length&#39;, &#39;227&#39;), (&#39;Content-Type&#39;, &#39;text/html&#39;), (&#39;Date&#39;, &#39;Thu, 09 Aug 2018 14:49:17 GMT&#39;), (&#39;Etag&#39;, &#39;&#34;5b56b4a8-e3&#34;&#39;), (&#39;Last-Modified&#39;, &#39;Tue, 24 Jul 2018 05:10:00 GMT&#39;), (&#39;P3p&#39;, &#39;CP=&#34; OTI DSP COR IVA OUR IND COM &#34;&#39;), (&#39;Pragma&#39;, &#39;no-cache&#39;), (&#39;Server&#39;, &#39;BWS/1.]]></description>
</item><item>
    <title>变量与数据类型</title>
    <link>/python/%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
    <description><![CDATA[学习使用Python中的各种数据，并将这些数据存储到变量中，以及如何在程序中使用这些变量。
变量 a = &#34;hello world!&#34; print(a) 我们添加了一个名为a的变量，它存储了一个值：文本“hello world!”。每一个变量都会存储一个值，我们可以在程序中随时修改变量的值，而python将会记录并使用变量的最新值。
变量的命名  变量只能包含字母、数字、下划线。变量不能以数字开头。变量可以命名为a_1，但不可以命名为1_a。 变量名不可以包含空格。在需要分隔单词时使用下划线分隔。如：get_num。 不能以Python的关键字和函数名作为变量名。如：print。 变量要简单且具有描述性：name``比n好，student_name比sn好。 慎用小写字母l和大写字母O。  数据类型 字符串 字符串就是一系列的字符。在Python中用引号括起来的都是字符串。其中的引号可以是双引号（&quot;&quot;）或单引号（''）。
a = &#34;我是字符串。&#34; b = &#39;我也是字符串。&#39; 这样我们就可以在字符串中包含双引号或单引号了：
a = &#34;我是&#39;字符串&#39;。&#34; b = &#39;我也是&#34;字符串&#34;。&#39; 使用方法修改字符串大小写 name = &#34;joecy wang&#34; print(name.title()) 输出的结果是：
Joecy Wang 我们将小写字符joecy wang存储到变量name中，在print语句中，我们对name使用方法title()，每个方法后面都会有一个括号，用于接受额外的信息，title()方法并不需要，所以它的括号是空的。
方法title()以首字母大写的方式显示每一个单词。如果想把字符串中的单词全部变为大写或是小写，可以使用方法upper()和lower()。
name = &#34;Joecy Wang&#34; print(name.upper()) print(name.lower()) 结果为：
JOECY WANG joecy wang 拼接字符串 first_name = &#34;joecy&#34; last_name = &#34;wang&#34; name = first_name + &#34; &#34; + last_name print(&#34;hello &#34; + name.]]></description>
</item></channel>
</rss>
