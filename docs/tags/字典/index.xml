<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字典 on 我的生活与学习</title>
    <link>//localhost:1313/tags/%E5%AD%97%E5%85%B8/</link>
    <description>Recent content in 字典 on 我的生活与学习</description>
    <generator>Hugo 0.125.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/%E5%AD%97%E5%85%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>字典</title>
      <link>//localhost:1313/python/%E5%AD%97%E5%85%B8/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/python/%E5%AD%97%E5%85%B8/</guid>
      <description>Python字典可以将相关的信息关联起来，字典中可存储的信息量几乎不受限制，而且查找速度极快。使用字典可以准确的模拟真实事物建模。&#xA;一个简单的字典 dict_1 = {&amp;#39;joecy&amp;#39;:25,&amp;#39;yingying&amp;#39;:24} print(dict_1[&amp;#39;joecy&amp;#39;]) 输出：&#xA;25 在Python中，字典是由一系列键-值对（key-value）组成。并放在花括号{}中。每一个键与一个值相关联，可以使用键来访问与其对应的值。与键相关联的值可以是数字、字符串、列表甚至另一个字典。&#xA;键与值之间使用冒号:分隔，键-值对之间使用逗号,分隔。&#xA;访问字典中的值 dict_1 = {&amp;#39;joecy&amp;#39;:25,&amp;#39;yingying&amp;#39;:24} print(dict_1[&amp;#39;joecy&amp;#39;]) #指定字典名，并在[]中指定键 添加键值对 要向字典中添加键-值对，可依次指定字典名、要添加的键以及值：&#xA;dict_1 = {&amp;#39;joecy&amp;#39;:25,&amp;#39;yingying&amp;#39;:24} dict_1[&amp;#39;muyi&amp;#39;] = 2 print(dict_1) 输出：&#xA;{&amp;#39;joecy&amp;#39;: 25, &amp;#39;yingying&amp;#39;: 24, &amp;#39;muyi&amp;#39;: 2} 一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值替换：&#xA;dict_1 = {&amp;#39;joecy&amp;#39;:25,&amp;#39;yingying&amp;#39;:24} dict_1[&amp;#39;muyi&amp;#39;] = 2 dict_1[&amp;#39;muyi&amp;#39;] = &amp;#39;1周岁&amp;#39; print(dict_1) 输出：&#xA;{&amp;#39;joecy&amp;#39;: 25, &amp;#39;yingying&amp;#39;: 24, &amp;#39;muyi&amp;#39;: &amp;#39;1周岁&amp;#39;} 键&#39;muyi&#39;的值被替换为了值&#39;1周岁&#39;。 键-值对的排列顺序与添加顺序不同，Python只关心键与值之前的对应关系。&#xA;和list比较，dict有以下几个特点：&#xA;查找和插入的速度极快，不会随着key的增加而变慢； 需要占用大量的内存，内存浪费多。 而list相反：&#xA;查找和插入的时间随着元素的增加而增加； 占用空间小，浪费内存很少。 所以，dict是用空间来换取时间的一种方法。（来自廖雪峰博客）&#xA;创建空字典 当我们需要存储用户提供的信息或编写能够自动生成大量键-值对的代码时，需要事先定义一个空字典：&#xA;d = {} d[&amp;#39;key1&amp;#39;] = &amp;#39;第一个值&amp;#39; d[&amp;#39;key2&amp;#39;] = &amp;#39;第二个值&amp;#39; print(d) 输出：</description>
    </item>
  </channel>
</rss>
