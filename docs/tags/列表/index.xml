<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>列表 on XiaoXi Blog</title>
    <link>/tags/%E5%88%97%E8%A1%A8/</link>
    <description>Recent content in 列表 on XiaoXi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E5%88%97%E8%A1%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>操作列表</title>
      <link>/posts/%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</guid>
      <description>很多时候我们需要对列表中的元素进行统一的操作，这时候，我们就需要遍历列表。
使用for循环遍历列表 a = [&amp;#39;我&amp;#39;,&amp;#39;你&amp;#39;,&amp;#39;他&amp;#39;] for i in a: print(i) 输出：
我 你 他 创建数值列表 使用函数range() for i in range(1,5): print(i) 输出：
1 2 3 4 函数range()从你指定的第一个数字开始，并在指定的第二个数字前面停下。
使用函数range()创建列表 使用函数list()将函数range()的结果直接转为列表：
num = list(range(1,5)) print(num) 输出：
[1,2,3,4] 可以给range()函数指定步长，来完成更多工作：
num = list(range(2,11,2)) print(num) 输出：
[2,4,6,8,10] 在这个示例中，range()函数从2开始，并以2为步长不断增加。 使用函数range()可以创建几乎所有的数字列表：
a = [] for i in range(1,5): a.append(i ** 2) print(a) 输出：
[1,4,9,16] 对数字列表进行统计 &amp;gt;&amp;gt;&amp;gt; a = [1,2,3,4,5,6,7] &amp;gt;&amp;gt;&amp;gt; min(a) 1 &amp;gt;&amp;gt;&amp;gt; max(a) 7 &amp;gt;&amp;gt;&amp;gt; sum(a) 29 列表解析 列表解析将for循环和创建新元素的代码合并在一行：</description>
    </item>
    
    <item>
      <title>组织列表</title>
      <link>/posts/%E7%BB%84%E7%BB%87%E5%88%97%E8%A1%A8/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%BB%84%E7%BB%87%E5%88%97%E8%A1%A8/</guid>
      <description>列表是一系列元素按照特定顺序排列的组成，列表是有序集合。
访问列表元素 因为列表是有序集合，所以我们只要给出想要访问的元素的位置告诉Python即可：
list1 = [1,2,3,4] print(list1[0]) 输出：
1 同样的，我们可以对列表元素调用方法，如title()方法：
list2 = [&amp;#39;joecy&amp;#39;,&amp;#39;wang&amp;#39;,&amp;#39;shuaige&amp;#39;] print(list2[0].title()) 输出：
Joecy 索引从0而不是1开始 在Python中，第一个列表元素的索引是0，在大多编程语言中都是如此。 Python为访问最后一个列表元素提供了特殊语法，可通过索引-1访问列表的最后一个元素：
list3 = [1,2,3,4] print(list3[-1]) 输出：
4 当然，-1、-2、-3&amp;hellip;也是可以的。
修改、添加和删除元素 修改元素 修改列表中的元素，可指定列表名和要修改的元素索引，再指定新值。
list4 = [&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;] list4[0] = 4 print(list4) 输出：
[&amp;#39;4&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;] 添加元素 在列表末尾添加元素 list5 = [&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;] list5.append(&amp;#39;4&amp;#39;) print(list5) 输出：
[&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;,&amp;#39;4&amp;#39;] 方法append()将元素4添加到了列表末尾，而又不影响其他元素。我们经常需要先创建一个空列表，并使用append()方法向其中添加元素。
在列表中插入元素 使用方法insert()可以在列表任意位置添加新元素，只需要指定新元素的索引和值：
list6 = [&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;] list6.insert(0,&amp;#39;4&amp;#39;) print(list6) 输出：
[&amp;#39;4&amp;#39;,&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;] 删除元素 使用del语句删除元素 如果知道想要删除的元素在列表中的位置，即可使用del语句。
list7 = [&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;] del list7[0] print(list7) 输出：
[&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;] 使用pop()元素删除元素 我们可以使用pop()方法删除列表中的元素并接着使用它的值：</description>
    </item>
    
  </channel>
</rss>