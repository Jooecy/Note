<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>爬虫 - tag - XiaoXi Blog</title>
        <link>/tags/%E7%88%AC%E8%99%AB/</link>
        <description>爬虫 - tag - XiaoXi Blog</description>
        <generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="/tags/%E7%88%AC%E8%99%AB/" rel="self" type="application/rss+xml" /><item>
    <title>requests基本用法</title>
    <link>/python/requests%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/requests%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
    <description><![CDATA[基本的GET、POST请求方法
GET请求 HTTP中最常见的请求之一就是GET请求，用requests构建GET请求非常方便。
使用requests.get() import requests r = requests.get(&#39;https://baidu.com/&#39;) print(type(r)) print(type(r.text)) print(r.status_code) print(r.cookies) print(r.text) 输出：
&lt;class &#39;requests.models.Response&#39;&gt; &lt;class &#39;str&#39;&gt; 200 &lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt; # 部分代码 &lt;!DOCTYPE html&gt; &lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; .... &lt;/body&gt; &lt;/html&gt; 使用requests.get()方法，即可以GET方式请求网页。
 status_code属性获取状态码 cookies属性获取cookies text属性获取网页内容 headers属性获取响应头 url属性获取URL history属性获取请求历史 等等&hellip;&hellip;  如果GET请求需要附加额外信息，例如添加两个参数：
r = requests.get('http://httpbin.org/get?name=joecy&amp;age=24')
如果写成这样未免太繁琐，这时可以利用params参数：
import requests data = {&#39;wd&#39;:&#39;我&#39;} r = requests.get(&#39;https://baidu.com/s&#39;,params=data) print(r.status_code) r.encoding = &#39;utf-8&#39; print(r.text)  r.encoding = 'utf-8' 用于修改编码
 输出了百度关于关键词“我”的搜索结果。
抓取网页 抓取知乎发现页面：]]></description>
</item><item>
    <title>requests库</title>
    <link>/python/requests%E5%BA%93/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/requests%E5%BA%93/</guid>
    <description><![CDATA[Requests库是用Python编写的，基于urllib，采用Apache2 Licensed开源协议的HTTP库；
相比urllib库，Requests库更加方便，可以节约我们大量的工作，完全满足HTTP测试需求。]]></description>
</item><item>
    <title>urllib库的使用</title>
    <link>/python/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[urllib库是Python内置的HTTP请求库，它包含四个模块：
 request：最基本的HTTP请求模块 error：异常处理模块 parse：工具模块 robotparser：识别robots.txt  使用urllib库，我们只需要关心请求的链接和需要传的参数是什么，以及设置请求头。不需要深入到底层去了解它。]]></description>
</item><item>
    <title>发送请求</title>
    <link>/python/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</link>
    <pubDate>Fri, 24 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author></author>
    <guid>/python/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</guid>
    <description><![CDATA[使用urllib的request模块，可以方便的实现请求的发送并得到响应。
发送请求 urlopen() 抓取Python官网：
import urllib.request response = urllib.request.urlopen(&#34;https://www.python.org&#34;) print(response.read().decode(&#39;utf-8&#39;)) 部分输出：
# 部分输出 &lt;script src=&#34;//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&#34;&gt;&lt;/script&gt; &lt;script&gt;window.jQuery || document.write(&#39;&lt;script src=&#34;/static/js/libs/jquery-1.8.2.min.js&#34;&gt;&lt;\/script&gt;&#39;)&lt;/script&gt; &lt;script src=&#34;/static/js/libs/masonry.pkgd.min.js&#34;&gt;&lt;/script&gt; &lt;script type=&#34;text/javascript&#34; src=&#34;/static/js/main-min.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;  decode('utf-8')方法将网页以制定编码解析。
 response是一个HTTPResponse类型的对象：
print(type(response)) 输出如下：
&lt;class &#39;http.client.HTTPResponse&#39;&gt; 它包含read()、readinto()、getheader(name)、getheaders()、fileno()等方法，以及msg、version、status、reason、debuglevel、closed等属性。
例子：
import urllib.request response = urllib.request.urlopen(&#34;https://www.baidu.com&#34;) print(response.status) print(&#39;\n&#39;,response.getheaders()) print(&#39;\n&#39;,response.getheader(&#39;Server&#39;)) 输出结果：
200 [(&#39;Accept-Ranges&#39;, &#39;bytes&#39;), (&#39;Cache-Control&#39;, &#39;no-cache&#39;), (&#39;Content-Length&#39;, &#39;227&#39;), (&#39;Content-Type&#39;, &#39;text/html&#39;), (&#39;Date&#39;, &#39;Thu, 09 Aug 2018 14:49:17 GMT&#39;), (&#39;Etag&#39;, &#39;&#34;5b56b4a8-e3&#34;&#39;), (&#39;Last-Modified&#39;, &#39;Tue, 24 Jul 2018 05:10:00 GMT&#39;), (&#39;P3p&#39;, &#39;CP=&#34; OTI DSP COR IVA OUR IND COM &#34;&#39;), (&#39;Pragma&#39;, &#39;no-cache&#39;), (&#39;Server&#39;, &#39;BWS/1.]]></description>
</item></channel>
</rss>
