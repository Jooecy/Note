<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python笔记 on 我的全新 Hugo 网站</title>
    <link>http://example.org/python/</link>
    <description>Recent content in Python笔记 on 我的全新 Hugo 网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 24 Apr 2020 19:00:52 +0800</lastBuildDate><atom:link href="http://example.org/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>if语句</title>
      <link>http://example.org/python/if%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/if%E8%AF%AD%E5%8F%A5/</guid>
      <description>if语句可以检查程序的当前状态，本据此采取相应的措施。 if语句的简单示例 a = [&amp;#39;joecy&amp;#39;,&amp;#39;wang&amp;#39;] for i in a: if i == &amp;#39;joecy&amp;#39;: print(i.title()) 输出： Joecy wang 在这个for循环中，if语句来检测</description>
    </item>
    
    <item>
      <title>Json模块</title>
      <link>http://example.org/python/json%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/json%E6%A8%A1%E5%9D%97/</guid>
      <description>很多时候，我们需要保存用户提供的信息，一种简单的方式时通过模块json来存储数据。 JSON格式最初是为了JavaScript开发的，但随后成</description>
    </item>
    
    <item>
      <title>requests基本用法</title>
      <link>http://example.org/python/requests%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/requests%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>基本的GET、POST请求方法 GET请求 HTTP中最常见的请求之一就是GET请求，用requests构建GET请求非常方便。 使用reques</description>
    </item>
    
    <item>
      <title>requests库</title>
      <link>http://example.org/python/requests%E5%BA%93/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/requests%E5%BA%93/</guid>
      <description>Requests库是用Python编写的，基于urllib，采用Apache2 Licensed开源协议的HTTP库； 相比urllib库，Re</description>
    </item>
    
    <item>
      <title>requests高级用法</title>
      <link>http://example.org/python/requests%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/requests%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</guid>
      <description>requests的高级用法包括如：文件上传、Cookies设置、代理设置、会话维持、超时设置等。 文件上传 import requests files = {&amp;#39;file&amp;#39;:open(&amp;#39;logo.png&amp;#39;,&amp;#39;rb&amp;#39;)} r = requests.post(&amp;#39;http://httpbin.org/post&amp;#39;,files=files) print(r.text) 首先创建一个表示文</description>
    </item>
    
    <item>
      <title>urllib库的使用</title>
      <link>http://example.org/python/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>urllib库是Python内置的HTTP请求库，它包含四个模块： request：最基本的HTTP请求模块 error：异常处理模块 parse</description>
    </item>
    
    <item>
      <title>while循环</title>
      <link>http://example.org/python/while%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/while%E5%BE%AA%E7%8E%AF/</guid>
      <description>Python的循环有两种，一种是for...in循环，依次把list或tuple中的每个元素迭代出来，第二种循环是while循环，只要条件满</description>
    </item>
    
    <item>
      <title>函数</title>
      <link>http://example.org/python/%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E5%87%BD%E6%95%B0/</guid>
      <description>函数是带名字的、可被重复使用的代码块，用来完成单一或是相关联的功能。例如Python内置的print()、len()、range()等就是函</description>
    </item>
    
    <item>
      <title>发送请求</title>
      <link>http://example.org/python/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</guid>
      <description>使用urllib的request模块，可以方便的实现请求的发送并得到响应。 发送请求 urlopen() 抓取Python官网： import urllib.request response = urllib.request.urlopen(&amp;#34;https://www.python.org&amp;#34;) print(response.read().decode(&amp;#39;utf-8&amp;#39;)) 部分输出： # 部分输出 &amp;lt;script</description>
    </item>
    
    <item>
      <title>变量与数据类型</title>
      <link>http://example.org/python/%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>学习使用Python中的各种数据，并将这些数据存储到变量中，以及如何在程序中使用这些变量。 变量 a = &amp;#34;hello world!&amp;#34; print(a) 我们添加了一个名为a的变量，它存储了</description>
    </item>
    
    <item>
      <title>字典</title>
      <link>http://example.org/python/%E5%AD%97%E5%85%B8/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E5%AD%97%E5%85%B8/</guid>
      <description>Python字典可以将相关的信息关联起来，字典中可存储的信息量几乎不受限制，而且查找速度极快。使用字典可以准确的模拟真实事物建模。 一个简单的</description>
    </item>
    
    <item>
      <title>我没有朋友</title>
      <link>http://example.org/python/%E6%88%91%E6%B2%A1%E6%9C%89%E6%9C%8B%E5%8F%8B/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E6%88%91%E6%B2%A1%E6%9C%89%E6%9C%8B%E5%8F%8B/</guid>
      <description>不知怎地，在我的家族中 “读书” “大学生”等词汇已然成为了贬义词。 三四年前，这些字眼也仅仅是在我父亲的嘴里说出，大抵也只是有口无心的顺出一句，</description>
    </item>
    
    <item>
      <title>操作列表</title>
      <link>http://example.org/python/%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</guid>
      <description>很多时候我们需要对列表中的元素进行统一的操作，这时候，我们就需要遍历列表。 使用for循环遍历列表 a = [&amp;#39;我&amp;#39;,&amp;#39;你&amp;</description>
    </item>
    
    <item>
      <title>文件读写</title>
      <link>http://example.org/python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</guid>
      <description>要使用文本中的信息，首先要将内容读取到内存当中，我们可以一次性读取文件的全部内容，也可以逐行读取。 读取整个文件 with open(&#39;1.txt&#39;) as file_obj: neirong = file_obj.read() print(neirong) 要使用文件内容</description>
    </item>
    
    <item>
      <title>测试代码之测试函数</title>
      <link>http://example.org/python/%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E4%B9%8B%E6%B5%8B%E8%AF%95%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E4%B9%8B%E6%B5%8B%E8%AF%95%E5%87%BD%E6%95%B0/</guid>
      <description>测试代码可以使程序面对各种情况都能按照预期那样工作。编写单元测试，如果我们对已经通过该单元测试的代码进行了修改，那么再进行一次单元测试，可以</description>
    </item>
    
    <item>
      <title>测试代码之测试类</title>
      <link>http://example.org/python/%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E4%B9%8B%E6%B5%8B%E8%AF%95%E7%B1%BB/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E4%B9%8B%E6%B5%8B%E8%AF%95%E7%B1%BB/</guid>
      <description>类的测试于函数的测试类似，但也有些许不同。 测试类 先写出一个用于测试的类，并存储在diaocha.py中： class Dc(): &amp;#39;&amp;#39;&amp;#39;收</description>
    </item>
    
    <item>
      <title>用户输入</title>
      <link>http://example.org/python/%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/</guid>
      <description>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中，供我们使用。 使用函数input获取</description>
    </item>
    
    <item>
      <title>类</title>
      <link>http://example.org/python/%E7%B1%BB/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E7%B1%BB/</guid>
      <description>类是抽象的模板，而实例是根据类创建出来的一个个具体的“对象”。class后面紧接着是类名，类名通常是大写开头的单词。 创建和使用类 使用关键字c</description>
    </item>
    
    <item>
      <title>组织列表</title>
      <link>http://example.org/python/%E7%BB%84%E7%BB%87%E5%88%97%E8%A1%A8/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E7%BB%84%E7%BB%87%E5%88%97%E8%A1%A8/</guid>
      <description>列表是一系列元素按照特定顺序排列的组成，列表是有序集合。 访问列表元素 因为列表是有序集合，所以我们只要给出想要访问的元素的位置告诉Python</description>
    </item>
    
    <item>
      <title>骑士</title>
      <link>http://example.org/python/%E9%AA%91%E5%A3%AB/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/python/%E9%AA%91%E5%A3%AB/</guid>
      <description>真是一个糟心的中午，外卖晚了一个小时才到。临近中午12点，我不得不打电话告诉骑士，把送餐地址从家变为公司。 是的，没有退单。 但在半小时前，我的</description>
    </item>
    
  </channel>
</rss>
